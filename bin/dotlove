#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'dotlove'
require 'dotlove_version'

include GLI

program_desc 'Describe your application here'

version Dotlove::VERSION

runner = Dotlove::Runner.new
runner.repo_dir_name = '.dotfiles'

# desc 'Describe some switch here'
# switch [:s,:switch]

# desc 'Describe some flag here'
# default_value 'the default'
# arg_name 'The name of the argument'
# flag [:f,:flagname]

desc 'Initializes a new dotlove repository'
command :init do |c|
  c.action do |global_options,options,args|
    runner.cmd_init(global_options, options, args)
  end
end

desc 'Describe add here'
arg_name 'Describe arguments to add here'
command :add do |c|
  # c.desc 'Describe a switch to add'
  # c.switch :s

  # c.desc 'Describe a flag to add'
  # c.default_value 'default'
  # c.flag :f
  c.action do |global_options,options,args|
    runner.cmd_add(global_options, options, args)
  end
end

desc 'Describe commit here'
arg_name 'Describe arguments to commit here'
command :commit do |c|
  c.action do |global_options,options,args|
    runner.cmd_commit(global_options, options, args)
  end
end

desc 'Describe git here'
arg_name 'Describe arguments to git here'
command :git do |c|
  c.action do |global_options,options,args|
    runner.cmd_git(global_options, options, args)
  end
end

desc 'Describe protect here'
arg_name 'Describe arguments to protect here'
command :protect do |c|
  c.action do |global_options,options,args|
  end
end

desc 'Describe remove here'
arg_name 'Describe arguments to remove here'
command :remove do |c|
  c.action do |global_options,options,args|
    runner.cmd_remove(global_options, options, args)
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit GLI.run(ARGV)
