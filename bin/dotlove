#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'dotlove_version'

include GLI

program_desc 'Describe your application here'

version Dotlove::VERSION

desc 'Describe some switch here'
switch [:s,:switch]

desc 'Describe some flag here'
default_value 'the default'
arg_name 'The name of the argument'
flag [:f,:flagname]

command :init do |c|
  c.desc 'Initializes a new dotlove repository'
  c.action do |global_options,options,args|
    repo_dir_name = '.dotfiles'
    if File.exists?(repo_dir_name)
      STDERR.puts "Repository directory already exists"
      exit 1
    else
      FileUtils.mkdir_p(repo_dir_name)
      Dir.chdir(repo_dir_name)
      `git init`
      Dir.chdir('..')
      puts "Repository Initialized"
    end
  end
end

desc 'Describe add here'
arg_name 'Describe arguments to add here'
command :add do |c|
  c.desc 'Describe a switch to add'
  c.switch :s

  c.desc 'Describe a flag to add'
  c.default_value 'default'
  c.flag :f
  c.action do |global_options,options,args|

    # Your command logic here
     
    # If you have any errors, just raise them
    # raise "that command made no sense"
  end
end

desc 'Describe protect here'
arg_name 'Describe arguments to protect here'
command :protect do |c|
  c.action do |global_options,options,args|
  end
end

desc 'Describe remove here'
arg_name 'Describe arguments to remove here'
command :remove do |c|
  c.action do |global_options,options,args|
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit GLI.run(ARGV)
